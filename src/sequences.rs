/*!
This module includes some mathmetical sequences and related calculations.
 */

/// Generates an arithmetic sequence of numbers.
///
/// Given the first term (`a`), the common difference (`d`), and the number of terms (`n`),
/// this function returns a vector (`Vec`) containing the arithmetic sequence.
/// The arithmetic sequence is generated by adding the common difference to the previous term.
///
/// # Arguments
///
/// * `a` - The first term of the arithmetic sequence.
/// * `d` - The common difference between consecutive terms.
/// * `n` - The number of terms to generate in the arithmetic sequence.
///
/// # Examples
/// ```
/// use eratosthenes::sequences::arithmetic;
///
/// let a = 2;
/// let d = 3;
/// let n = 5;
///
/// let sequence = arithmetic(a, d, n);
/// assert_eq!(sequence, vec![2, 5, 8, 11, 14]);
/// ```
pub fn arithmetic(a: usize, d: usize, n: usize) -> Vec<usize> {
    let mut result: Vec<usize> = Vec::with_capacity(n);

    for index in 0..n {
        result.push(a + index * d);
    }

    result
}

/// Generates a Fibonacci sequence up to a specified limit.
///
/// Given the limit (`until`), this function returns a vector (`Vec<usize>`) containing the Fibonacci
/// sequence up to, but excluding, the specified limit. The Fibonacci sequence starts with the
/// numbers 1 and 1, and each subsequent number is the sum of the two preceding numbers.
///
/// # Arguments
///
/// * `until` - The limit for generating the Fibonacci sequence. The sequence will contain all
///            Fibonacci numbers less than this limit.
///
/// # Panics
///
/// This function will panic if the `until` parameter is less than 2, as the Fibonacci sequence
/// is typically defined to start with the numbers 1 and 1.
///
/// # Examples
///
/// ```
/// use eratosthenes::sequences::fibonacci;
///
/// let until = 20;
/// let sequence = fibonacci(until);
/// assert_eq!(sequence, vec![1, 1, 2, 3, 5, 8, 13]);
/// ```
pub fn fibonacci(until: usize) -> Vec<usize> {
    if until < 2 {
        panic!("Invalid parameter. Please use integers above 1.")
    }

    if until == 2 {
        return vec![1, 1];
    };
    if until == 3 {
        return vec![1, 1, 2];
    };

    let mut array: Vec<usize> = vec![1, 1, 2];

    let mut index: usize = 3;
    loop {
        if array[index - 1] + array[index - 2] >= until {
            break;
        }

        array.push(array[index - 1] + array[index - 2]);
        index += 1;
    }
    array
}

/// Returns the nth Fibonacci number.
///
/// Given the position (`nth`), this function calculates and returns the nth Fibonacci number.
/// It generates a Fibonacci sequence up to a large limit (1_000_000_000_000_000_000) and retrieves
/// the desired Fibonacci number from the sequence.
///
/// # Arguments
///
/// * `nth` - The position of the Fibonacci number to retrieve. The position starts from 1.
///
/// # Examples
///
/// ```
/// use eratosthenes::sequences::nth_fibonacci;
///
/// let nth = 10;
/// let fibonacci_number = nth_fibonacci(nth);
/// assert_eq!(fibonacci_number, 55);
/// ```
pub fn nth_fibonacci(nth: usize) -> usize {
    let fibonacci: Vec<usize> = fibonacci(1_000_000_000_000_000_000);
    fibonacci[nth - 1]
}

/// Generates prime numbers up to a specified limit using the Sieve of Eratosthenes algorithm.
///
/// Given the limit (`until`), this function returns a vector (`Vec`) containing all prime
/// numbers less than or equal to the specified limit.
///
/// # Arguments
///
/// * `until` - The limit for generating prime numbers. The sequence will contain all prime
///             numbers less than or equal to this limit.
///
/// # Panics
///
/// This function will panic if the `until` parameter is less than 2, as there are no prime
/// numbers below 2.
///
/// # Examples
///
/// ```
/// use eratosthenes::sequences::primes;
///
/// let until = 20;
/// let prime_sequence = primes(until);
/// assert_eq!(prime_sequence, vec![2, 3, 5, 7, 11, 13, 17, 19]);
/// ```
pub fn primes(until: usize) -> Vec<usize> {
    if until < 2 {
        panic!("There are nor prime numbers under 2.");
    };

    let mut sieve: Vec<bool> = vec![true; until + 1];
    sieve[0] = false;
    sieve[1] = false;

    let mut number: usize = 2;
    while number * number <= until {
        if sieve[number] {
            let mut multiple: usize = number * number;
            while multiple <= until {
                sieve[multiple] = false;
                multiple += number;
            }
        }
        number += 1;
    }

    let primes: Vec<usize> = sieve
        .iter()
        .enumerate()
        .filter(|(_, &is_prime)| is_prime)
        .map(|(number, _)| number)
        .collect();

    primes
}

/// Finds the nth prime number.
///
/// Given an unsigned integer (`nth`), this function finds and returns the nth prime number.
///
/// # Arguments
///
/// * `nth` - An unsigned integer. The position of the prime number to find.
///
/// # Examples
///
/// ```
/// use eratosthenes::sequences::nth_prime;
///
/// let nth = 10;
/// let prime = nth_prime(nth);
/// assert_eq!(prime, 29);
/// ```
pub fn nth_prime(nth: usize) -> usize {
    if nth == 1 {
        return 2;
    }

    let mut primes = vec![2];
    let mut number = 3;

    while primes.len() < nth {
        if primes.iter().all(|&prime| number % prime != 0) {
            primes.push(number);
        }
        number += 2;
    }

    *primes.last().unwrap()
}

/// Checks if a number is prime.
///
/// Given an unsigned integer (`number`), this function checks if it is a prime number and returns
/// a boolean indicating the result.
///
/// # Arguments
///
/// * `number` - An unsigned integer. The number to check for primality.
///
/// # Examples
///
/// ```
/// use eratosthenes::sequences::is_prime;
///
/// let number = 37;
/// let is_prime_number = is_prime(number);
/// assert_eq!(is_prime_number, true);
/// ```
pub fn is_prime(number: usize) -> bool {
    if number < 2 {
        return false;
    }

    let sqrt = (number as f64).sqrt() as usize;
    for index in 2..=sqrt {
        if number % index == 0 {
            return false;
        }
    }

    true
}

/// Generates a vector of square numbers for a given number of squares.
///
/// Given an unsigned integer `number_of_squares`, this function generates and returns a vector
/// containing the square numbers of consecutive integers starting from 0 up to `number_of_squares - 1`.
///
/// # Arguments
///
/// * `number_of_squares` - An unsigned integer representing the number of squares to generate.
///
/// # Examples
///
/// ```
/// use eratosthenes::sequences::square_numbers;
///
/// let number_of_squares = 10;
/// let squares = square_numbers(number_of_squares);
///
/// assert_eq!(squares, vec![0, 1, 4, 9, 16, 25, 36, 49, 64, 81]);
/// ```
pub fn square_numbers(number_of_squares: usize) -> Vec<usize> {
    (0..number_of_squares).map(|index| index * index).collect()
}

/// /// Generates a vector of triangular numbers up to a given count.
///
/// # Arguments
///
/// * `number_of_triangulars` - A usize value that indicates the number of triangular numbers to generate.
///
/// # Panics
///
/// Panics if the `number_of_triangulars` is less than 1.
///
/// # Example
///
/// ```
/// use eratosthenes::sequences::triangular_numbers;
/// let t_nums: Vec<usize> = triangular_numbers(5);
/// assert_eq!(t_nums, vec![0, 1, 3, 6, 10]);
/// ```
pub fn triangular_numbers(number_of_triangulars: usize) -> Vec<usize> {
    if number_of_triangulars < 1 {
        panic!("You may request 1 or more triangular numbers.");
    }

    (0..number_of_triangulars)
        .map(|n| n * (n + 1) / 2)
        .collect()
}

/// Returns the nth triangular number.
///
/// # Arguments
///
/// * `nth` - A usize value that indicates the nth triangular number.
///
/// # Example
///
/// ```
/// use eratosthenes::sequences::nth_triangular;
/// let fifth_triangular = nth_triangular(5);
/// assert_eq!(fifth_triangular, 10);
/// ```
pub fn nth_triangular(nth: usize) -> usize {
    nth * (nth - 1) / 2
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn arithmetic_test() {
        assert_eq!(arithmetic(2, 3, 4), [2, 5, 8, 11]);
    }

    #[test]
    fn fibonacci_test() {
        assert_eq!(fibonacci(2), vec![1, 1]);
        assert_eq!(fibonacci(3), vec![1, 1, 2]);
        assert_eq!(fibonacci(100), vec![1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]);
    }

    #[test]
    fn nth_fibonacci_test() {
        assert_eq!(nth_fibonacci(1), 1);
        assert_eq!(nth_fibonacci(2), 1);
        assert_eq!(nth_fibonacci(3), 2);
        assert_eq!(nth_fibonacci(4), 3);
        assert_eq!(nth_fibonacci(5), 5);
        assert_eq!(nth_fibonacci(11), 89);
        assert_eq!(nth_fibonacci(12), 144);
        assert_eq!(nth_fibonacci(39), 63245986);
        assert_eq!(nth_fibonacci(40), 102334155);
    }

    #[test]
    fn primes_test() {
        assert_eq!(
            primes(1_050),
            vec![
                2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,
                83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
                173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257,
                263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,
                359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,
                457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,
                569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,
                659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,
                769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,
                881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,
                997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049
            ]
        );
    }

    #[test]
    fn nth_prime_test() {
        assert_eq!(nth_prime(10), 29);
        assert_eq!(nth_prime(1), 2);
        assert_eq!(nth_prime(2), 3);
        assert_eq!(nth_prime(1000), 7919);
    }

    #[test]
    fn is_prime_test() {
        assert!(!is_prime(10));
        assert!(is_prime(13));
        assert!(!is_prime(1));
    }

    #[test]
    fn square_numbers_test() {
        assert_eq!(
            square_numbers(10),
            vec![0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
        );
    }

    #[test]
    fn triangular_numbers_test() {
        assert_eq!(triangular_numbers(1), vec![0]);
        assert_eq!(triangular_numbers(2), vec![0, 1]);
        assert_eq!(
            triangular_numbers(10),
            vec![0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
        );
    }

    #[test]
    fn nth_triangular_test() {
        assert_eq!(nth_triangular(1), 0);
        assert_eq!(nth_triangular(2), 1);
        assert_eq!(nth_triangular(3), 3);
        assert_eq!(nth_triangular(4), 6);
    }
}
